//--------------------------------------
//--- 010 Editor v6.0.1 Binary Template
//
// File:
// Author:
// Revision:
// Purpose:
//--------------------------------------
//Currently only ShaderPackageIntel.sdf

struct Block;

//Offset of:
//4E 6F 72 6D 61 6C 00 54 61 6E 67 65 6E 74 00 55 56 5F 50 72 69 6D 61 72 79 00 55 56 5F 53 65 63 6F 6E 64 61 72 79 00 57 65 69 67 68 74 00 57 65 69 67 68 74 00 4A 6F 69 6E 74 00 4A 6F 69 6E 74 00 43 6F 6C 6F 72 00 50 6F 73 69 74 69 6F 6e 50 46 00 49 41 53 6b 69 6e 38 77 74 32 55 56 00 50 6f 73 69 74 69 6f 6e 00
//=0xaae2d85
//-0x6f6c85 (next val of blocktype 0x81F58067 in ShaderPackageIntel.sdf) = 0xA3EC100
local uint32 propNameOffset = 0xA3EC100;
local uint32 blockStart = 0x9bf9618;
local uint32 materialStart = 0x4510c;

struct Property{
    uint64 stringPointer<format=hex>;
    uint64 unkn<format=hex>;
    local uint64 realStringPointer<format=hex>;
    realStringPointer=stringPointer+propNameOffset;
};

string readProp(Property &p){
    string s;
    SPrintf( s, "%s(%016lx)", ReadString(p.stringPointer+propNameOffset),p.unkn );
    return s;
}
string readBlock(Block &b){
    string s;
    SPrintf( s, "%08x", b.blocktype );
    return s;
}
string readUnkn4(uint64 unkn4){
    string s;
    if(unkn4!=0)
        SPrintf( s, "%s", ReadString(unkn4+propNameOffset) );
    return s;
}
FSeek(blockStart);
struct Block{
    uint32 unkn1<format=hex>;
    uint32 blocktype<format=hex>;
    short unkn2<format=hex>;
    short vertexStructSize;
    uint32 unkn3<format=hex>;
    Property props[11]<read=readProp>;
    uint64 unkn4<format=hex,read=readUnkn4>;
} block[19]<read=readBlock>;


FSeek(materialStart);
struct Material{
    uint32 partSkinID<format=hex>;
    short unkn1;
    short unkn2;
    uint32 unkn3[6]<format=hex,read=readUnkn4>;
} material[50000];