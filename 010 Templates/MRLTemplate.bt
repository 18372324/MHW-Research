//------------------------------------------------
//--- 010 Editor v8.0.1 Binary Template
//
//      File: 
//   Authors: CrazyT
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: *.mrl3
//  ID Bytes: 
//   History: 
//------------------------------------------------
struct UnknS2;
struct UnknS2{
    ubyte type;
    ubyte unkn1;
    ubyte unkn2;
    ubyte unkn3;
    uint32 x;
    //not so shure if this is correct
    uint texIdx;
    uint unkn5;
};


struct Header{
    long id<format=hex>;
    byte unkn1[0x0C];
    uint materialCount;
    uint textureCount;
    uint64 textureOffset<format=hex>;
    uint64 materialOffset<format=hex>;
};
struct Texture{
    // fileTypeCode for tex is [(zlib.crc32("rTexture".encode()) ^ 0xffffffff) & 0x7fffffff]
    uint fileTypeCode<format=hex>;
    byte unkn2[12];
    char path[256];
};
struct Material{
    uint headId<format=hex>;
	//for example (zlib.crc32("NPC_Mt__4".encode()) ^ 0xffffffff) & 0x7fffffff
    uint materialNameHash<format=hex>;
	uint shaderHash<format=hex>;
    uint skinid<format=hex>;
    uint matSize;
	short unkn4;
	byte floatArrOff;
    byte unkn5[9];
    ubyte unkn6;
    ubyte unkn7[15];
    uint startAddr<format=hex>;
    uint unkn8;
};

string ReadMaterial(Material& v){
    string s;
    string s2="";
    if(v.headId==0x4516E7AB){
        s2 = "nDraw::Material";
    }
    SPrintf( s, "%s skinid:%08x shaderHash:%08x",s2,v.skinid,v.shaderHash);
    return s;
}

struct UnknS2_2{
    ubyte unkn1;
    ubyte unkn2;
    ubyte unkn3;
    ubyte unkn4;
    ubyte unkn5;
    ubyte unkn6;
    ubyte unkn7;
    uint unkn8;
    uint unkn9;
};
struct UnknS3{
    float x;
    float y;
    
};
struct MaterialA(int count){
    Material material[count]<read=ReadMaterial>;
};
struct UnknS2A(int count){
    UnknS2 unknS[count]<optimize=false,read=readUnknS2>;
};
struct UnknS3A(int count){
    UnknS3 unknS[count];
};
string ReadTexture(Texture& t){
    return t.path;
}
string ReadHeader(Header& h){
    return "rMaterial";
}


Header head<bgcolor=0x0000ff,read=ReadHeader>;
Texture textures[head.textureCount]<read=ReadTexture,bgcolor=0xff0000>;

string readUnknS2(UnknS2 &v){
    string s;
    string t = "";
    string type = "";
    if(v.texIdx-1<head.textureCount){
        t += textures[v.texIdx-1].path;
    }
    if(v.type == 2){
        type = "texture";
    }
    if(v.type == 1){
        type = "cbuffer";
		t = "";
    }
    SPrintf( s, "%s: %08x # %04d # %s",type,v.x,v.texIdx,t);
    return s;
}

local uint i;
//for(i=0;i<head.textureCount;i++){
    MaterialA material(head.materialCount)<bgcolor=0xffff00>;
    for(i=0;i<head.materialCount;i++){
        FSeek(material.material[i].startAddr);
        UnknS2A unknS2((material.material[i].floatArrOff*8)/(sizeof(UnknS2)))<bgcolor=0x00ffff>;
		struct FloatArr{
			float floatVal[(material.material[i].matSize-material.material[i].floatArrOff*8)/4]<bgcolor=0x00ffaa>;
		}floatArr;
    }
    //UnknS3A unknS3(head.unknS2Count/2);
//}
